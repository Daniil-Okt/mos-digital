
export function processDataSrcScripts() {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ script —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-src –∞—Ç—Ä–∏–±—É—Ç–æ–º
    const lazyScripts = document.querySelectorAll('script[data-src]');
    
    console.log(`Found ${lazyScripts.length} lazy scripts to load`);
    
    lazyScripts.forEach((scriptElement, index) => {
        const dataSrc = scriptElement.getAttribute('data-src');
        const shouldDefer = scriptElement.hasAttribute('defer');
        const shouldAsync = scriptElement.hasAttribute('async');
        
        if (dataSrc) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π script —ç–ª–µ–º–µ–Ω—Ç
            const newScript = document.createElement('script');
            newScript.src = dataSrc;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            if (shouldDefer) newScript.defer = true;
            if (shouldAsync) newScript.async = true;
            
            // –ö–æ–ø–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã (–∫—Ä–æ–º–µ data-src)
            Array.from(scriptElement.attributes).forEach(attr => {
                if (attr.name !== 'data-src' && attr.name !== 'src') {
                    newScript.setAttribute(attr.name, attr.value);
                }
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            newScript.onload = function() {
                console.log(`Script loaded: ${dataSrc}`);
                // –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
                document.dispatchEvent(new CustomEvent('lazyScriptLoaded', {
                    detail: { src: dataSrc, element: newScript }
                }));
            };
            
            newScript.onerror = function() {
                console.error(`Script failed to load: ${dataSrc}`);
                document.dispatchEvent(new CustomEvent('lazyScriptError', {
                    detail: { src: dataSrc, element: newScript }
                }));
            };
            
            // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –Ω–æ–≤—ã–π
            scriptElement.parentNode.replaceChild(newScript, scriptElement);
            
            console.log(`Loading script: ${dataSrc} (defer: ${shouldDefer}, async: ${shouldAsync})`);
        }
    });
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Intersection Observer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
function processDataSrcScriptsAdvanced(options = {}) {
    const {
        threshold = 0.1,
        rootMargin = '0px',
        loadImmediately = false
    } = options;
    
    const lazyScripts = document.querySelectorAll('script[data-src]');
    
    if (loadImmediately || !('IntersectionObserver' in window)) {
        // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å—Ä–∞–∑—É
        loadAllScriptsImmediately(lazyScripts);
        return;
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Intersection Observer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –≤ viewport
    const observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const scriptElement = entry.target;
                loadSingleScript(scriptElement);
                observer.unobserve(scriptElement);
            }
        });
    }, { threshold, rootMargin });
    
    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∫–∞–∂–¥—ã–º script —ç–ª–µ–º–µ–Ω—Ç–æ–º
    lazyScripts.forEach(scriptElement => {
        observer.observe(scriptElement);
    });
}

function loadAllScriptsImmediately(scriptElements) {
    scriptElements.forEach(loadSingleScript);
}

function loadSingleScript(scriptElement) {
    const dataSrc = scriptElement.getAttribute('data-src');
    const shouldDefer = scriptElement.hasAttribute('defer');
    const shouldAsync = scriptElement.hasAttribute('async');
    
    if (!dataSrc) return;
    
    const newScript = document.createElement('script');
    newScript.src = dataSrc;
    
    if (shouldDefer) newScript.defer = true;
    if (shouldAsync) newScript.async = true;
    
    // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∫—Ä–æ–º–µ data-src –∏ src
    Array.from(scriptElement.attributes).forEach(attr => {
        if (attr.name !== 'data-src' && attr.name !== 'src') {
            newScript.setAttribute(attr.name, attr.value);
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    newScript.onload = function() {
        console.log(`‚úÖ Script loaded: ${dataSrc}`);
        scriptElement.dispatchEvent(new CustomEvent('lazyLoadComplete', {
            bubbles: true,
            detail: { success: true, src: dataSrc }
        }));
    };
    
    newScript.onerror = function() {
        console.error(`‚ùå Script failed: ${dataSrc}`);
        scriptElement.dispatchEvent(new CustomEvent('lazyLoadComplete', {
            bubbles: true,
            detail: { success: false, src: dataSrc }
        }));
    };
    
    // –ó–∞–º–µ–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
    scriptElement.parentNode.replaceChild(newScript, scriptElement);
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initLazyLoader);
} else {
    initLazyLoader();
}

function initLazyLoader() {
    // –ñ–¥–µ–º –ø–æ–ª–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (document.readyState === 'complete') {
        startLazyLoading();
    } else {
        window.addEventListener('load', startLazyLoading);
    }
}

function startLazyLoading() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    const hasLazyScripts = document.querySelectorAll('script[data-src]').length > 0;
    
    if (hasLazyScripts) {
        console.log('üöÄ Starting lazy script loading...');
        processDataSrcScriptsAdvanced({
            threshold: 0.1,
            rootMargin: '50px',
            loadImmediately: false // –ú–µ–Ω—è–π—Ç–µ –Ω–∞ true –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        });
    }
}



